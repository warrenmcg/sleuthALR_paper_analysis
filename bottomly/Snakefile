include: '../config.py'

from os.path import isfile

###
# initialization
###

rule init:
     output:
         'metadata/training_sets.rds',
         'metadata/training_a.txt',
         'metadata/training_b.txt',
         'metadata/validation_sets.rds',
         'metadata/validation_a.txt',
         'metadata/validation_b.txt'
     shell:
         source_r('R', 'generate_resampling.R')

SAMPLES_FILE = 'metadata/accession.txt'

SRA_SINGLE = []
if isfile(SAMPLES_FILE):
    SRA_SINGLE = get_sample_ids(SAMPLES_FILE)
else:
    print('Error: please run the init script first')
    import sys
    sys.exit(1)

TRAINING_A = []
TRAINING_B = []
TRAINING_FILE_A = 'metadata/training_a.txt'
TRAINING_FILE_B = 'metadata/training_b.txt'
if isfile(TRAINING_FILE_A) and isfile(TRAINING_FILE_B):
    TRAINING_A = get_sample_ids(TRAINING_FILE_A)
    TRAINING_B = get_sample_ids(TRAINING_FILE_B)
    # print(TRAINING_A)
else:
    # force running the init
    print('Warning: the init script has not yet been run. Running now.')
    rule:
        input: rules.init.output

VALIDATION_FILE_A = 'metadata/validation_a.txt'
VALIDATION_FILE_B = 'metadata/validation_b.txt'
if isfile(VALIDATION_FILE_A) and isfile(VALIDATION_FILE_B):
    VALIDATION_A = get_sample_ids(VALIDATION_FILE_A)
    VALIDATION_B = get_sample_ids(VALIDATION_FILE_B)
    # print(VALIDATION_A)
else:
    # force running the init
    print('Warning: the init script has not yet been run. Running now.')
    rule:
        input: rules.init.output

###
# main runs
###

rule all:
    input:
        expand('data/single/{id}/{id}.fastq.gz', id = SRA_SINGLE),
        expand('data/single/{id}/{id}_trimmed.fastq.gz', id = SRA_SINGLE),
        expand('results/single/{id}/kallisto/abundance.h5', id = SRA_SINGLE),
        'R/fdr.html'

rule fastq_dump_single:
    input:
        SAMPLES_FILE
    output:
        'data/single/{id,[A-Z]+[0-9]+}',
        'data/single/{id}/{id}.fastq.gz'
    threads: 1
    shell:
        'fastq-dump'
        ' -O {output[0]}'
        ' --gzip'
        ' {wildcards.id}'

# trim the reads to length of 43 (as specified in the paper)
rule fastq_trim:
    input:
        'data/single/{id,[A-Z]+[0-9]+}',
        'data/single/{id}/{id}.fastq.gz'
    output:
        'data/single/{id}/{id}_trimmed.fastq.gz'
    threads: 1
    shell:
        '{UPDATED_PATH} '
        'seqtk'
        ' trimfq'
        ' -e 33'
        ' {input[1]}'
        ' | '
        'gzip'
        ' > '
        '{output}'

rule kallisto:
    input:
        'data/single/{id,[A-Z]+[0-9]+}/{id}_trimmed.fastq.gz'
    params:
        dir = 'results/single/{id}/kallisto'
    output:
        'results/single/{id}/kallisto/abundance.h5'
    threads: 5
    shell:
        '{UPDATED_PATH} '
        'kallisto'
        ' quant'
        ' -b 100'
        ' -t 5'
        ' -i {MOUSE_KALLISTO_INDEX}'
        ' -o {params.dir}'
        ' --single'
        ' -l 300'
        ' -s 20'
        ' {input}'

rule run_benchmarks_isoform:
    input:
        expand('results/single/{id}/kallisto/abundance.h5', id = SRA_SINGLE),
    output:
        'results/isoform_self_benchmark.rds',
    threads: N_THREADS
    shell:
        source_r('R', 'run_benchmarks.R') +
        ' {threads}'

rule fdr_plots:
    input:
        'results/isoform_self_benchmark.rds'
    output:
        'R/fdr.html'
    shell:
        source_rmd('R', 'fdr.Rmd')

rule clean:
    shell:
        'rm'
        ' results/all_benchmarks.rds'
        ' results/sensitivity_precision_plots.rds'
        ' R/isoform_benchmarks.html'
