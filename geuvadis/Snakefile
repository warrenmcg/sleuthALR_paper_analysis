include: '../config.py'

from os.path import isfile

rule init:
    output:
        'metadata/geu_meta.RData',
        'metadata/accession.txt',
        'metadata/finn_samples.txt'
    shell:
        source_r('R', 'metadata.R')

# TODO: put this at the beginning of the pipeline (run it before everything)
ACCESSION_FILE = 'metadata/accession.txt'
ERA_SINGLE = []
if isfile(ACCESSION_FILE):
    ERA_SINGLE = get_sample_ids(ACCESSION_FILE)
else:
    # force running the init
    print('Warning: the accession file is missing or the init script has not yet been run. Running now.')
    rule:
        input: rules.init.output

SAMPLES_FILE = 'metadata/finn_samples.txt'
FINN_SAMPLES = []
if isfile(SAMPLES_FILE):
    with open('metadata/finn_samples.txt', 'r') as input:
        for line in input:
            FINN_SAMPLES.append(line.strip())
else:
    # force running the init
    print('Warning: the finn_samples.txt file is missing or init script has not yet been run. Running now.')
    rule:
        input: rules.init.output

rule all:
    input:
        # get all the metadata we need from geuvadis
        'metadata/geu_meta.RData',
        'results/finn_subsamples.rds',
        expand('finn_samples/{id}/{id}_{i}.fastq.gz', id = FINN_SAMPLES, i = [1, 2]),

        # used for null experiment
        expand('results/finn_samples/{id}/abundance.h5', id = FINN_SAMPLES),
        expand('results/finn_samples/{id}/hisat.bam', id = FINN_SAMPLES),
        expand('results/finn_samples/{id}/featureCounts.txt', id = FINN_SAMPLES),
        'results/null_resampling_fdr_report.html',

        # do a large experiment so that we can do permutations
        expand('sims/{exp}/{id}_{i}.fasta.gz', exp = SIM_NAMES, id = SIM_IDS, i = [1, 2]),
        expand('results/sims/{exp}/kallisto/{id}/abundance.h5', exp = SIM_NAMES, id = SIM_IDS),
        expand('results/sims/{exp}/salmon/{id}/abundance.h5', exp = SIM_NAMES, id = SIM_IDS),
        'results/sims/no_change_benchmarks.rds',
        'results/sims/down_benchmarks.rds',
        'results/sims/up_benchmarks.rds',
        'results/sims/benchmark_report.html'

def finn_sample_input(wildcards):
    id = wildcards['id']
    return expand('finn_samples/{id}/{id}_{i}.fastq.gz', id = id, i = [1, 2])

rule fastq_dump:
    input:
        ERA_SINGLE
    output:
        'finn_samples/{id,[A-Z]+[0-9]+}',
        finn_sample_input
    threads: 1
    shell:
        'mkdir finn_samples/{wildcards.id} && '
        ' wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR188/{input[0]}/{input[0]}_1.fastq.gz && '
        ' wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR188/{input[0]}/{input[0]}_2.fastq.gz && '
        ' rename \'s/{input[0]}/{wildcards.id}/\' {input[0]}_*fasta.gz && '
        ' mv {output[1]} {output[2]} {output[0]}'

rule finn_samples:
    input:
        finn_sample_input
    output:
        'results/finn_samples/{id}/abundance.h5'
    threads: 5
    shell:
        '{UPDATED_PATH} '
        'kallisto quant'
        ' -i {KALLISTO_INDEX}'
        ' -b 30'
        ' -o {output[0]}'
        ' -t {threads}'
        ' {input[0]} {input[1]}'

rule prep_null_resampling:
    input:
        'metadata/geu_meta.RData',
        'results/finn_samples/{id}/abundance.h5'
    output:
        'results/finn_subsamples.rds'
    shell:
        source_r('R', 'resampling_fdr.R')

rule finn_hisat_alignment:
    input:
        finn_sample_input
    output:
        'results/finn_samples/{id}/hisat.bam'
    threads: 10
    benchmark:
        'benchmark/finn_samples/{id}/hisat/benchmark.json'
    shell:
        '{UPDATED_PATH}'
        ' hisat2'
        ' -x {HISAT_INDEX}'
        ' -1 {input[0]}'
        ' -2 {input[1]}'
        ' --dta-cufflinks'
        ' -p {threads}'
        ' | '
        '{UPDATED_PATH} samtools view -Sb -'
        ' > '
        '{output}.unsorted'
        ' && '
        '{UPDATED_PATH} samtools sort'
        ' -o {output}'
        ' {output}.unsorted'
        ' && '
        'rm {output}.unsorted'

rule finn_featureCounts:
    input:
        'results/finn_samples/{id}/hisat.bam'
    output:
        'results/finn_samples/{id}/featureCounts.txt'
    benchmark:
        'benchmark/finn_samples/{id}/featureCounts/benchmark.json'
    threads: 2
    shell:
        '{UPDATED_PATH} '
        'featureCounts '
        ' -a {TRANSCRIPTOME_GTF}'
        ' -o {output}'
        ' -T {threads}'
        ' -p'
        ' {input}'

rule null_resampling_isoform:
    input:
        expand('results/finn_samples/{id}/abundance.h5', id = FINN_SAMPLES),
        expand('results/finn_samples/{id}/featureCounts.txt', id = FINN_SAMPLES)
    output:
        'results/null_resampling/isoform.rds'
    threads: 20
    shell:
        source_r('R', 'null_resampling_fdr_isoform.R') + ' {threads}'

rule null_resampling_gene:
    input:
        expand('results/finn_samples/{id}/abundance.h5', id = FINN_SAMPLES),
        expand('results/finn_samples/{id}/featureCounts.txt', id = FINN_SAMPLES)
    output:
        'results/null_resampling/gene.rds'
    threads: 20
    shell:
        source_r('R', 'null_resampling_fdr_gene.R') + ' {threads}'

rule null_resampling_fdr_report:
    input:
        'results/null_resampling/isoform.rds',
        'results/null_resampling/gene.rds',
    output:
        'results/null_resampling_fdr_report.html'
    shell:
        source_rmd('R', 'null_resampling_fdr_report.Rmd', '../results/null_resampling_fdr_report.html')

###
# simulation generation
###

# this simulation deals with modeling independent differential usage amongst the isoforms
# basically, every isoform is looked at independently and decides whether or not it will be
# differentially expressed independently.
rule finn_sleuth:
    input:
        'metadata/geu_meta.RData'
    output:
        'results/finn_sleuth.rds'
    shell:
        source_r('R', 'polyester_sleuth.R')

rule make_simulation:
    input:
        'results/finn_sleuth.rds'
    output:
        'results/polyester_ground_truth.RData',
        expand('sims/{exp}/{id}_{i}.fasta.gz', exp = SIM_NAMES, id = SIM_IDS, i = [1, 2])
    shell:
        source_r('R', 'run_simulation.R')

rule kallisto:
    input:
        'sims/{exp}/{id}_1.fasta.gz',
        'sims/{exp}/{id}_2.fasta.gz'
    output:
        'sims/{exp}/kallisto/{id}/',
        'sims/{exp}/kallisto/{id}/abundance.h5',
        'sims/{exp}/kallisto/{id}/abundance.tsv'
    benchmark:
        'benchmark/{exp}/{id}/kallisto/benchmark.json'
    threads: 5
    shell:
        '{UPDATED_PATH} '
        'kallisto quant'
        ' -i {KALLISTO_INDEX}'
        ' -b 100'
        ' --bias'
        ' -o {output[0]}'
        ' -t {threads}'
        ' --fr-stranded'
        ' {input[0]} {input[1]}'

rule salmon:
    input:
        'sims/{exp}/{id}_1.fasta.gz',
        'sims/{exp}/{id}_2.fasta.gz'
    output:
        'sims/{exp}/salmon/{id}/',
        'sims/{exp}/salmon/{id}/quant.sf'
    benchmark:
        'benchmark/{exp}/{id}/salmon/benchmark.json'
    threads: 5
    shell:
        '{UPDATED_PATH} '
        'salmon quant'
        ' -i {SALMON_INDEX}'
        ' --numGibbsSamples 100'
        ' --gcBias'
        ' --seqBias'
        ' --useVBOpt'
        ' -o {output[0]}'
        ' -p {threads}'
        ' -l "ISF"'
        ' -1 {input[0]} -2 {input[1]}'

rule prep_fish:
    input:
        'sims/{exp}/salmon'
    output:
        'sims/{exp}/salmon/{id}/abundance.h5'
    shell:
        source_r('R', 'prep_fish.R') ' {wildcards.exp}'

def get_isoform_dependencies(wildcards):
    exp = wildcards['experiment']
    ret = []
    ret += expand('sims/{exp}/exp_{num}/results/sleuth', exp = exp,
        num = range(1, N_SIM + 1))
    return ret
rule benchmark_isoform:
    input:
        get_isoform_dependencies
    output:
        'results/{experiment}/isoform_benchmarks.rds'
    threads:
        N_SIM
    shell:
        source_r('R', 'bench_isoform.R') + ' {threads} {wildcards.experiment}'

rule benchmark_report:
    input:
        'results/{experiment}/isoform_benchmarks.rds',
        'results/{experiment}/gene_benchmarks.rds',
    output:
        'results/{experiment}/benchmark_report.html',
    threads:
        1
    shell:
        source_rmd('R', 'benchmark_report.Rmd',
            '../results/{wildcards.experiment}/benchmark_report.html') +
        ' {threads} {wildcards.experiment}'
